// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: edges.sql

package db

import (
	"context"
)

const getEdges = `-- name: GetEdges :one
SELECT id, node_id, edges
FROM edges
where node_id = $1
`

func (q *Queries) GetEdges(ctx context.Context, nodeID int64) (Edge, error) {
	row := q.db.QueryRow(ctx, getEdges, nodeID)
	var i Edge
	err := row.Scan(&i.ID, &i.NodeID, &i.Edges)
	return i, err
}

const listEdges = `-- name: ListEdges :many
SELECT id, node_id, edges
FROM edges
`

func (q *Queries) ListEdges(ctx context.Context) ([]Edge, error) {
	rows, err := q.db.Query(ctx, listEdges)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Edge{}
	for rows.Next() {
		var i Edge
		if err := rows.Scan(&i.ID, &i.NodeID, &i.Edges); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

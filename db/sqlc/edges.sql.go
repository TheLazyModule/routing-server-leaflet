// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: edges.sql

package db

import (
	"context"

	dto "routing/db/dto"
)

const getEdgeByID = `-- name: GetEdgeByID :one
SELECT id, node_id, neighbors
FROM edges
where node_id = $1
`

func (q *Queries) GetEdgeByID(ctx context.Context, nodeID int64) (Edge, error) {
	row := q.db.QueryRow(ctx, getEdgeByID, nodeID)
	var i Edge
	err := row.Scan(&i.ID, &i.NodeID, &i.Neighbors)
	return i, err
}

const listEdges = `-- name: ListEdges :many
SELECT node_id, neighbors
FROM edges
`

type ListEdgesRow struct {
	NodeID    int64         `json:"node_id"`
	Neighbors dto.EdgesData `json:"neighbors"`
}

func (q *Queries) ListEdges(ctx context.Context) ([]ListEdgesRow, error) {
	rows, err := q.db.Query(ctx, listEdges)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListEdgesRow{}
	for rows.Next() {
		var i ListEdgesRow
		if err := rows.Scan(&i.NodeID, &i.Neighbors); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

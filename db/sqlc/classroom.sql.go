// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: classroom.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getClassroom = `-- name: GetClassroom :one
select id, building_id, room_code, category_id, name, description, image_urls
from classroom
where id = $1
`

func (q *Queries) GetClassroom(ctx context.Context, id int64) (Classroom, error) {
	row := q.db.QueryRow(ctx, getClassroom, id)
	var i Classroom
	err := row.Scan(
		&i.ID,
		&i.BuildingID,
		&i.RoomCode,
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.ImageUrls,
	)
	return i, err
}

const listClassrooms = `-- name: ListClassrooms :many
select room_code, name, description, category_id, image_urls
from classroom
`

type ListClassroomsRow struct {
	RoomCode    pgtype.Text `json:"room_code"`
	Name        pgtype.Text `json:"name"`
	Description pgtype.Text `json:"description"`
	CategoryID  pgtype.Int4 `json:"category_id"`
	ImageUrls   []string    `json:"image_urls"`
}

func (q *Queries) ListClassrooms(ctx context.Context) ([]ListClassroomsRow, error) {
	rows, err := q.db.Query(ctx, listClassrooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListClassroomsRow{}
	for rows.Next() {
		var i ListClassroomsRow
		if err := rows.Scan(
			&i.RoomCode,
			&i.Name,
			&i.Description,
			&i.CategoryID,
			&i.ImageUrls,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

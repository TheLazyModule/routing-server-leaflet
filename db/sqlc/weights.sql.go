// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: weight.sql

package db

import (
	"context"
)

const getWeight = `-- name: GetWeight :one
SELECT from_node_id, to_node_id, distance
FROM weights
where from_node_id = $1
  and to_node_id = $2
`

type GetWeightParams struct {
	FromNodeID int64 `json:"from_node_id"`
	ToNodeID   int64 `json:"to_node_id"`
}

func (q *Queries) GetWeight(ctx context.Context, arg GetWeightParams) (Weight, error) {
	row := q.db.QueryRow(ctx, getWeight, arg.FromNodeID, arg.ToNodeID)
	var i Weight
	err := row.Scan(&i.FromNodeID, &i.ToNodeID, &i.Distance)
	return i, err
}

const listWeights = `-- name: ListWeights :many
SELECT from_node_id, to_node_id, distance
FROM weights
`

func (q *Queries) ListWeights(ctx context.Context) ([]Weight, error) {
	rows, err := q.db.Query(ctx, listWeights)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Weight{}
	for rows.Next() {
		var i Weight
		if err := rows.Scan(&i.FromNodeID, &i.ToNodeID, &i.Distance); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: nodes.sql

package db

import (
	"context"

	"github.com/twpayne/go-geom"
	dto "routing/db/dto"
)

const getNodeAndEdges = `-- name: GetNodeAndEdges :one
select nodes.id, name, point_geom, edges.id, node_id, neighbors
from nodes
         join edges
              on nodes.id = edges.node_id
where nodes.id = $1
`

type GetNodeAndEdgesRow struct {
	ID        int64         `json:"id"`
	Name      string        `json:"name"`
	PointGeom geom.Point    `json:"point_geom"`
	ID_2      int64         `json:"id_2"`
	NodeID    int64         `json:"node_id"`
	Neighbors dto.EdgesData `json:"neighbors"`
}

func (q *Queries) GetNodeAndEdges(ctx context.Context, id int64) (GetNodeAndEdgesRow, error) {
	row := q.db.QueryRow(ctx, getNodeAndEdges, id)
	var i GetNodeAndEdgesRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PointGeom,
		&i.ID_2,
		&i.NodeID,
		&i.Neighbors,
	)
	return i, err
}

const getNodeByID = `-- name: GetNodeByID :one
SELECT name, ST_ASTEXT(point_geom) as point_geom
FROM nodes
WHERE id = $1
`

type GetNodeByIDRow struct {
	Name      string      `json:"name"`
	PointGeom interface{} `json:"point_geom"`
}

func (q *Queries) GetNodeByID(ctx context.Context, id int64) (GetNodeByIDRow, error) {
	row := q.db.QueryRow(ctx, getNodeByID, id)
	var i GetNodeByIDRow
	err := row.Scan(&i.Name, &i.PointGeom)
	return i, err
}

const getNodesByIds = `-- name: GetNodesByIds :many
SELECT name, ST_ASTEXT(point_geom) as point_geom
FROM nodes
WHERE id = ANY ($1)
`

type GetNodesByIdsRow struct {
	Name      string      `json:"name"`
	PointGeom interface{} `json:"point_geom"`
}

func (q *Queries) GetNodesByIds(ctx context.Context, id int64) ([]GetNodesByIdsRow, error) {
	rows, err := q.db.Query(ctx, getNodesByIds, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetNodesByIdsRow{}
	for rows.Next() {
		var i GetNodesByIdsRow
		if err := rows.Scan(&i.Name, &i.PointGeom); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listNodes = `-- name: ListNodes :many
SELECT name, ST_ASTEXT(point_geom) as point_geom
FROM nodes
ORDER BY id
`

type ListNodesRow struct {
	Name      string      `json:"name"`
	PointGeom interface{} `json:"point_geom"`
}

func (q *Queries) ListNodes(ctx context.Context) ([]ListNodesRow, error) {
	rows, err := q.db.Query(ctx, listNodes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListNodesRow{}
	for rows.Next() {
		var i ListNodesRow
		if err := rows.Scan(&i.Name, &i.PointGeom); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: building.sql

package db

import (
	"context"
)

const getBuildingByID = `-- name: GetBuildingByID :one
SELECT name,
       ST_ASTEXT(st_centroid(geom))        as geom,
       ST_ASTEXT(ST_TRANSFORM(geom, 4326)) as geom_geographic,
       image_urls                          as image_urls
from building
where id = $1
`

type GetBuildingByIDRow struct {
	Name           string      `json:"name"`
	Geom           interface{} `json:"geom"`
	GeomGeographic interface{} `json:"geom_geographic"`
	ImageUrls      []string    `json:"image_urls"`
}

func (q *Queries) GetBuildingByID(ctx context.Context, id int64) (GetBuildingByIDRow, error) {
	row := q.db.QueryRow(ctx, getBuildingByID, id)
	var i GetBuildingByIDRow
	err := row.Scan(
		&i.Name,
		&i.Geom,
		&i.GeomGeographic,
		&i.ImageUrls,
	)
	return i, err
}

const getBuildingCentroidGeom = `-- name: GetBuildingCentroidGeom :one
SELECT ST_ASTEXT(ST_CENTROID(geom))                     as building_centroid,
       ST_ASTEXT(ST_CENTROID(ST_TRANSFORM(geom, 4326))) as building_centroid_geographic
from building
where name = $1
`

type GetBuildingCentroidGeomRow struct {
	BuildingCentroid           interface{} `json:"building_centroid"`
	BuildingCentroidGeographic interface{} `json:"building_centroid_geographic"`
}

func (q *Queries) GetBuildingCentroidGeom(ctx context.Context, name string) (GetBuildingCentroidGeomRow, error) {
	row := q.db.QueryRow(ctx, getBuildingCentroidGeom, name)
	var i GetBuildingCentroidGeomRow
	err := row.Scan(&i.BuildingCentroid, &i.BuildingCentroidGeographic)
	return i, err
}

const listBuildings = `-- name: ListBuildings :many
SELECT name,
       ST_ASTEXT(st_centroid(geom))        as geom,
       ST_ASTEXT(st_centroid( ST_TRANSFORM(geom, 4326) )) as geom_geographic,
       image_urls                          as image_urls
from building
order by id
`

type ListBuildingsRow struct {
	Name           string      `json:"name"`
	Geom           interface{} `json:"geom"`
	GeomGeographic interface{} `json:"geom_geographic"`
	ImageUrls      []string    `json:"image_urls"`
}

func (q *Queries) ListBuildings(ctx context.Context) ([]ListBuildingsRow, error) {
	rows, err := q.db.Query(ctx, listBuildings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListBuildingsRow{}
	for rows.Next() {
		var i ListBuildingsRow
		if err := rows.Scan(
			&i.Name,
			&i.Geom,
			&i.GeomGeographic,
			&i.ImageUrls,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
